Esta conversa foi gerada com o Duck.ai (https://duck.ai) usando o modelo GPT-4o mini da OpenAI. Os chats com IA podem apresentar informações incorretas ou ofensivas (consulta https://duckduckgo.com/duckai/privacy-terms para obter mais informações).

====================

Pedido do utilizador 1 de 10 - 05/06/2025, 12:50:50:
estou querendo compartilhar uma pasta na minha rede local, ai fiz esse codigo ficou bom e certo ? e oque mudar para melhorar ? sudo mkdir /home/king/Público
sudo chmod 777 /home/king/Público
sudo mkdir /root/Público
sudo chmod 777 /root/Público


sudo systemctl restart smbd

sudo nano /etc/samba/smb.conf


[PublicoHome]
path = /home/king/Público
browsable = yes
writable = yes
guest ok = yes
read only = no

[PublicoRoot]
path = /root/Público
browsable = yes
writable = yes
guest ok = yes
read only = no

GPT-4o mini:
O seu código para compartilhar pastas na rede local usando Samba está quase correto, mas há algumas considerações e melhorias que você pode fazer:

### 1. **Permissões de Pasta**
- Usar `chmod 777` dá permissões totais a todos os usuários, o que pode ser um risco de segurança. Em vez disso, considere usar permissões mais restritivas, como `chmod 770`, que permite acesso total apenas ao proprietário e ao grupo, e nenhum acesso para outros usuários.

### 2. **Pasta no Diretório Root**
- Criar uma pasta em `/root` e compartilhá-la pode não ser a melhor prática, pois o diretório `/root` é destinado ao usuário root e não é acessível para outros usuários por padrão. Considere usar um diretório em `/home` ou em outro local apropriado.

### 3. **Configuração do Samba**
- A configuração do Samba parece boa, mas você pode adicionar algumas opções para melhorar a segurança e a funcionalidade. Por exemplo, você pode definir um grupo específico para acesso, em vez de permitir acesso de convidados.

### 4. **Reiniciar o Samba**
- O comando `sudo systemctl restart smbd` é correto, mas você também pode querer reiniciar o `nmbd` se estiver usando nomes de rede.

### 5. **Exemplo de Configuração Melhorada**
Aqui está uma versão melhorada do seu código:

```bash
# Criar diretórios
sudo mkdir /home/king/Público
sudo chmod 770 /home/king/Público
# Evitar criar no /root
# sudo mkdir /root/Público
# sudo chmod 770 /root/Público

# Reiniciar o serviço Samba
sudo systemctl restart smbd
sudo systemctl restart nmbd

# Editar o arquivo de configuração do Samba
sudo nano /etc/samba/smb.conf
```

E no arquivo `smb.conf`, você pode usar:

```ini
[PublicoHome]
path = /home/king/Público
browsable = yes
writable = yes
guest ok = yes
read only = no
create mask = 0770
directory mask = 0770
force group = users  # Substitua 'users' pelo grupo desejado

# Remover a seção do PublicoRoot
```

### 6. **Adicionar Usuários ao Samba**
Se você decidir não permitir acesso de convidados, você pode adicionar usuários ao Samba com o comando:

```bash
sudo smbpasswd -a nome_do_usuario
```

### 7. **Testar a Configuração**
Após fazer as alterações, teste a configuração do Samba com:

```bash
testparm
```

Isso ajudará a identificar qualquer erro na configuração.

### Conclusão
Essas mudanças ajudarão a melhorar a segurança e a funcionalidade do seu compartilhamento de rede. Certifique-se de ajustar as permissões e a configuração de acordo com suas necessidades específicas.

--------------------

Pedido do utilizador 2 de 10 - 05/06/2025, 12:56:42:
não entendi essa parte , force group = users  # Substitua 'users' pelo grupo desejado

GPT-4o mini:
A opção `force group` no arquivo de configuração do Samba (`smb.conf`) é usada para garantir que todos os arquivos e diretórios criados dentro do compartilhamento herdem um grupo específico. Isso é útil para controlar o acesso e as permissões de forma mais organizada.

### Explicação da Opção `force group`

- **`force group = users`**: Isso significa que, independentemente do grupo do usuário que está criando um arquivo ou diretório, o grupo será definido como `users`. Assim, todos os arquivos e diretórios criados dentro do compartilhamento terão o grupo `users`.

### Por que usar `force group`?

1. **Controle de Acesso**: Se você tem vários usuários que precisam acessar o mesmo compartilhamento, definir um grupo específico ajuda a gerenciar quem pode acessar o quê. Por exemplo, se você tem um grupo chamado `projetos`, você pode usar `force group = projetos` para garantir que todos os arquivos criados no compartilhamento sejam acessíveis a todos os membros desse grupo.

2. **Permissões Consistentes**: Isso garante que todos os arquivos e diretórios criados dentro do compartilhamento tenham as mesmas permissões de grupo, facilitando a colaboração.

### Como Configurar

1. **Criar um Grupo**: Se você ainda não tem um grupo específico, você pode criá-lo com o comando:

   ```bash
   sudo groupadd nome_do_grupo
   ```

2. **Adicionar Usuários ao Grupo**: Adicione os usuários que precisam de acesso ao grupo:

   ```bash
   sudo usermod -aG nome_do_grupo nome_do_usuario
   ```

3. **Modificar a Configuração do Samba**: No seu arquivo `smb.conf`, você pode definir a opção `force group` para o grupo que você criou:

   ```ini
   [PublicoHome]
   path = /home/king/Público
   browsable = yes
   writable = yes
   guest ok = yes
   read only = no
   create mask = 0770
   directory mask = 0770
   force group = nome_do_grupo  # Substitua 'nome_do_grupo' pelo grupo que você criou
   ```

### Conclusão

Usar `force group` é uma boa prática para gerenciar permissões em compartilhamentos de rede, especialmente em ambientes onde vários usuários precisam colaborar. Certifique-se de substituir `nome_do_grupo` pelo nome real do grupo que você deseja usar.

--------------------

Pedido do utilizador 3 de 10 - 05/06/2025, 12:58:35:
não tenho grupo não, e nem uso pois só 2,3 pessoas usam o pc , e as vezes usam o pc secundario ai pega do primeiro pc para jogar os arquivos pro segundo pc só pra isso

GPT-4o mini:
Se você está compartilhando arquivos entre apenas 2 ou 3 pessoas e não está utilizando grupos, você pode simplificar a configuração do Samba. Nesse caso, você pode continuar permitindo o acesso de convidados e não precisa se preocupar com a opção `force group`. Aqui está uma versão simplificada da configuração:

### 1. **Criar a Pasta de Compartilhamento**

Você já fez isso, mas aqui está um lembrete:

```bash
sudo mkdir /home/king/Público
sudo chmod 770 /home/king/Público  # Permissões para o proprietário e grupo
```

### 2. **Configurar o Samba**

Edite o arquivo de configuração do Samba:

```bash
sudo nano /etc/samba/smb.conf
```

E adicione ou modifique a seção para o compartilhamento:

```ini
[PublicoHome]
path = /home/king/Público
browsable = yes
writable = yes
guest ok = yes
read only = no
create mask = 0770
directory mask = 0770
```

### 3. **Reiniciar o Samba**

Após fazer as alterações, reinicie o serviço Samba:

```bash
sudo systemctl restart smbd
sudo systemctl restart nmbd
```

### 4. **Acesso de Convidados**

Com `guest ok = yes`, qualquer pessoa na rede local poderá acessar a pasta sem precisar de um nome de usuário ou senha. Isso é conveniente, mas tenha em mente que isso significa que qualquer pessoa na sua rede local poderá acessar e modificar os arquivos na pasta compartilhada.

### 5. **Testar o Compartilhamento**

Para acessar a pasta compartilhada a partir de outro computador na rede, você pode usar o endereço IP do computador que está compartilhando a pasta. Por exemplo, se o IP do computador é `192.168.1.10`, você pode acessar a pasta compartilhada digitando `\\192.168.1.10\PublicoHome` na barra de endereços do explorador de arquivos.

### Conclusão

Essa configuração deve atender às suas necessidades de compartilhamento simples entre algumas pessoas. Se, no futuro, você decidir adicionar mais usuários ou grupos, você pode sempre ajustar as permissões e a configuração do Samba conforme necessário.

--------------------

Pedido do utilizador 4 de 10 - 05/06/2025, 13:00:49:
guest ok = yes , mais coloquei uma senha forte no samba com o comando smbpasswd entao mesmo com o guest ok eles tem que ter a senha  que eu criei para acessar né ?

GPT-4o mini:
Sim, você está correto. Se você configurou uma senha para um usuário Samba usando o comando `smbpasswd`, mesmo com a opção `guest ok = yes`, os usuários ainda precisarão fornecer a senha para acessar o compartilhamento, a menos que você tenha configurado explicitamente um acesso de convidado sem autenticação.

### Como Funciona

- **`guest ok = yes`**: Permite que usuários sem autenticação acessem o compartilhamento. Se você não tiver configurado um usuário convidado específico, isso geralmente significa que qualquer pessoa na rede pode acessar o compartilhamento sem precisar de uma senha.

- **Senha do Samba**: Se você criou um usuário Samba com uma senha usando `smbpasswd`, os usuários precisarão usar essa senha para acessar o compartilhamento, mesmo que `guest ok` esteja habilitado. Isso significa que, se você tiver um usuário convidado configurado, ele poderá acessar sem senha, mas os usuários que precisam usar a conta com senha devem fornecer a senha correta.

### O Que Fazer

Se você deseja que todos os usuários que acessam o compartilhamento precisem de uma senha, você pode:

1. **Remover ou desativar a opção `guest ok`**:
   - Altere `guest ok = yes` para `guest ok = no` no seu arquivo `smb.conf`.

2. **Manter a senha forte**:
   - Continue usando o comando `smbpasswd` para gerenciar as senhas dos usuários que precisam acessar o compartilhamento.

### Exemplo de Configuração

Aqui está como ficaria a configuração se você quiser exigir uma senha para acessar o compartilhamento:

```ini
[PublicoHome]
path = /home/king/Público
browsable = yes
writable = yes
guest ok = no  # Exigir autenticação
read only = no
create mask = 0770
directory mask = 0770
```

### Conclusão

Com essa configuração, todos os usuários que tentarem acessar o compartilhamento precisarão fornecer um nome de usuário e uma senha válidos. Isso aumenta a segurança do seu compartilhamento de arquivos.

--------------------

Pedido do utilizador 5 de 10 - 05/06/2025, 13:01:25:
e para que serve create mask = 0770
directory mask = 0770

GPT-4o mini:
As opções `create mask` e `directory mask` no arquivo de configuração do Samba (`smb.conf`) são usadas para definir as permissões padrão para arquivos e diretórios que são criados dentro do compartilhamento. Vamos entender cada uma delas:

### 1. **create mask**

- **Definição**: A opção `create mask` define as permissões padrão para arquivos que são criados no compartilhamento.
- **Formato**: O valor é uma máscara octal que determina quais permissões serão concedidas ao arquivo.
- **Exemplo**: `create mask = 0770`
  - Isso significa que, por padrão, os arquivos criados terão permissões de leitura, gravação e execução para o proprietário e para o grupo, mas nenhuma permissão para outros usuários.
  - As permissões são representadas da seguinte forma:
    - O primeiro dígito (0) é para o "setuid", "setgid" e "sticky bit" (geralmente não usado aqui).
    - O segundo dígito (7) é para o proprietário (leitura, gravação e execução).
    - O terceiro dígito (7) é para o grupo (leitura, gravação e execução).
    - O quarto dígito (0) é para outros usuários (nenhuma permissão).

### 2. **directory mask**

- **Definição**: A opção `directory mask` define as permissões padrão para diretórios que são criados no compartilhamento.
- **Formato**: Assim como `create mask`, o valor é uma máscara octal.
- **Exemplo**: `directory mask = 0770`
  - Isso significa que, por padrão, os diretórios criados terão permissões de leitura, gravação e execução para o proprietário e para o grupo, mas nenhuma permissão para outros usuários.
  - As permissões para diretórios são importantes porque a permissão de execução em um diretório permite que os usuários acessem o conteúdo do diretório.

### Resumo

- **`create mask = 0770`**: Define que arquivos criados no compartilhamento terão permissões de leitura, gravação e execução para o proprietário e o grupo, mas nenhuma permissão para outros usuários.
- **`directory mask = 0770`**: Define que diretórios criados no compartilhamento terão as mesmas permissões.

Essas configurações ajudam a garantir que apenas o proprietário e os membros do grupo tenham acesso total aos arquivos e diretórios, aumentando a segurança do compartilhamento. Se você quiser permitir acesso a outros usuários, você pode ajustar as máscaras conforme necessário.

--------------------

Pedido do utilizador 6 de 10 - 05/06/2025, 13:05:46:
outros usuários que vc diz é tipo usuario de outro computador , se eu tirar esse hd com meus dados com esssas configurações ,  e fizer por exemplo um arquivo de texto e salvar. se eu levar esse hd no computador do meu amigo, e ligar lá o arquivo de texto nao vai abrir, só vai abrir e funcionar se eu abrir com meu usuario e senha ?

GPT-4o mini:
As permissões de arquivos e diretórios no Linux (e, por extensão, no Samba) são baseadas em um sistema de propriedade que envolve usuários e grupos. Vamos esclarecer como isso funciona em relação ao seu cenário:

### Cenário

1. **Criação de Arquivos**: Se você criar um arquivo de texto em um compartilhamento Samba com as permissões `create mask = 0770`, o arquivo será criado com as seguintes permissões:
   - O proprietário do arquivo terá permissões de leitura, gravação e execução.
   - O grupo associado ao arquivo terá permissões de leitura, gravação e execução.
   - Outros usuários (aqueles que não são o proprietário e não pertencem ao grupo) não terão nenhuma permissão.

2. **Transferência do HD**: Se você transferir o HD para o computador do seu amigo, o sistema operacional do computador dele (se for Linux) ainda reconhecerá as permissões do arquivo. No entanto, o que acontece depende de alguns fatores:

   - **Se o usuário no computador do seu amigo não for o mesmo que o proprietário do arquivo**: Ele não terá permissão para abrir ou modificar o arquivo, pois as permissões não permitem acesso a "outros usuários".
   - **Se o grupo do arquivo não incluir o grupo do usuário no computador do seu amigo**: O mesmo se aplica; o usuário não terá acesso.

### Acesso ao Arquivo

- **Acesso com o Mesmo Usuário**: Se você usar o mesmo nome de usuário e senha que usou para criar o arquivo no computador do seu amigo, e se o sistema estiver configurado para reconhecer esse usuário, você poderá acessar o arquivo.
  
- **Acesso sem o Mesmo Usuário**: Se o usuário no computador do seu amigo não for o mesmo que o proprietário do arquivo e não pertencer ao grupo que tem acesso, ele não conseguirá abrir o arquivo.

### Soluções

Se você deseja que o arquivo seja acessível em outros computadores sem depender de um usuário específico, considere as seguintes opções:

1. **Alterar as Máscaras de Permissão**: Você pode usar uma máscara que permita acesso a "outros usuários". Por exemplo, `create mask = 0777` permitiria que qualquer usuário tivesse acesso total ao arquivo, mas isso pode ser um risco de segurança.

2. **Usar um Sistema de Arquivos Compatível**: Se você formatar o HD com um sistema de arquivos que não tenha as mesmas restrições de permissões (como FAT32 ou exFAT), os arquivos poderão ser acessados em qualquer computador, independentemente do sistema operacional ou das permissões.

3. **Configurar um Grupo Comum**: Se você e seu amigo usarem contas de usuário no mesmo grupo, você pode adicionar o grupo ao arquivo, permitindo que ambos acessem os arquivos.

### Conclusão

As permissões de arquivos no Linux são projetadas para proteger os dados e garantir que apenas usuários autorizados possam acessá-los. Se você deseja que os arquivos sejam acessíveis em diferentes computadores, considere ajustar as permissões ou usar um sistema de arquivos que não imponha essas restrições.

--------------------

Pedido do utilizador 7 de 10 - 05/06/2025, 13:11:29:
se eu usar create mask = 0770  e criar muitos arquivos depois posso mudar todos eles para 0777 , ou seja pra todos ?

GPT-4o mini:
Sim, você pode mudar as permissões de arquivos já existentes para `0777`, permitindo que todos os usuários tenham acesso total (leitura, gravação e execução) a esses arquivos. Para fazer isso, você pode usar o comando `chmod` no terminal.

### Como Mudar as Permissões de Vários Arquivos

Se você deseja alterar as permissões de todos os arquivos em um diretório para `0777`, você pode usar o seguinte comando:

```bash
sudo chmod 0777 /caminho/para/o/diretorio/*
```

### Explicação do Comando

- **`sudo`**: Executa o comando com privilégios de superusuário, necessário se você não for o proprietário dos arquivos ou se as permissões atuais não permitirem a alteração.
- **`chmod`**: O comando usado para mudar as permissões de arquivos.
- **`0777`**: Define as permissões para leitura, gravação e execução para o proprietário, grupo e outros usuários.
- **`/caminho/para/o/diretorio/*`**: Especifica todos os arquivos no diretório. O asterisco (`*`) é um caractere curinga que representa todos os arquivos.

### Alterar Permissões Recursivamente

Se você também quiser alterar as permissões de todos os subdiretórios e arquivos dentro de um diretório, você pode usar a opção `-R` (recursiva):

```bash
sudo chmod -R 0777 /caminho/para/o/diretorio
```

### Considerações de Segurança

- **Permissões 0777**: Embora isso permita que todos os usuários leiam, escrevam e executem os arquivos, isso pode ser um risco de segurança, especialmente em um ambiente multiusuário ou em um servidor. Qualquer usuário poderá modificar ou excluir os arquivos.
- **Avalie a Necessidade**: Antes de aplicar permissões amplas, considere se é realmente necessário. Em muitos casos, permissões mais restritivas (como `0755` ou `0770`) podem ser mais apropriadas.

### Conclusão

Sim, você pode mudar as permissões de arquivos existentes para `0777` usando o comando `chmod`. Apenas tenha em mente as implicações de segurança ao fazer isso, especialmente se o sistema for acessado por múltiplos usuários.

--------------------

Pedido do utilizador 8 de 10 - 05/06/2025, 13:15:44:
se eu tiver escrito com 0770 copiar e colar num pendrive fat32 ai posso abrir os arquivos?

GPT-4o mini:
Sim, se você copiar arquivos que foram criados com permissões `0770` para um pendrive formatado em FAT32, você poderá abrir esses arquivos em qualquer computador que suporte o sistema de arquivos FAT32, independentemente das permissões originais.

### Por que isso acontece?

1. **Sistema de Arquivos FAT32**: O FAT32 não suporta o mesmo sistema de permissões que o Linux. Em vez disso, ele trata todos os arquivos como acessíveis a todos os usuários. Isso significa que, ao copiar arquivos para um pendrive FAT32, as permissões de arquivo do Linux não são aplicadas.

2. **Acesso aos Arquivos**: Quando você copia arquivos para o pendrive, eles não retêm as permissões do sistema de arquivos original (Linux). Assim, qualquer arquivo que você copiar, independentemente de suas permissões originais, será acessível a qualquer usuário que tenha acesso ao pendrive.

### O que você deve considerar

- **Compatibilidade**: Os arquivos copiados para o pendrive FAT32 poderão ser abertos em qualquer sistema operacional que suporte FAT32 (como Windows, macOS e Linux).
  
- **Segurança**: Como os arquivos não têm as mesmas permissões de segurança que teriam em um sistema Linux, qualquer pessoa que tenha acesso ao pendrive poderá ler, modificar ou excluir os arquivos.

### Conclusão

Sim, você pode copiar arquivos criados com permissões `0770` para um pendrive FAT32 e abri-los em qualquer computador. As permissões do Linux não se aplicam ao sistema de arquivos FAT32, tornando os arquivos acessíveis a todos os usuários que têm acesso ao pendrive.

--------------------

Pedido do utilizador 9 de 10 - 05/06/2025, 13:16:51:
agora se eu copiar e colar num hd externo ext4 , e levar em outro computador nao vai abrir, sem eu saber o usuario e senha do que criou.

GPT-4o mini:
Correto. Se você copiar arquivos de um sistema de arquivos ext4 (que é o sistema de arquivos padrão para muitas distribuições Linux) e esses arquivos foram criados com permissões `0770`, a situação será a seguinte:

### Comportamento ao Copiar para um HD Externo ext4

1. **Permissões de Arquivo**: Quando você copia arquivos de um sistema ext4 para outro sistema ext4, as permissões de arquivo são mantidas. Isso significa que, se os arquivos foram criados com permissões `0770`, apenas o proprietário e os membros do grupo terão acesso total a esses arquivos.

2. **Acesso em Outro Computador**:
   - **Se o usuário que está tentando acessar os arquivos no novo computador não for o mesmo que o proprietário dos arquivos**: Esse usuário não terá permissão para abrir, modificar ou excluir os arquivos, pois as permissões `0770` não permitem acesso a "outros usuários".
   - **Se o grupo do usuário no novo computador não incluir o grupo associado aos arquivos**: O mesmo se aplica; o usuário não terá acesso.

### Exemplo Prático

- **Usuário A**: Cria um arquivo no HD externo ext4 com permissões `0770`.
- **Usuário B**: Tenta acessar esse arquivo em outro computador, mas não é o mesmo usuário que criou o arquivo e não pertence ao grupo que tem acesso. Usuário B não conseguirá abrir o arquivo.

### Soluções

Se você deseja que os arquivos sejam acessíveis em diferentes computadores sem depender de um usuário específico, considere as seguintes opções:

1. **Alterar as Permissões Antes de Copiar**: Você pode mudar as permissões dos arquivos para `0777` antes de copiá-los, permitindo que todos os usuários tenham acesso.

   ```bash
   sudo chmod -R 0777 /caminho/para/o/diretorio
   ```

2. **Usar um Sistema de Arquivos Compatível**: Se você formatar o HD externo com um sistema de arquivos que não tenha as mesmas restrições de permissões (como FAT32 ou exFAT), os arquivos poderão ser acessados em qualquer computador.

3. **Configurar um Grupo Comum**: Se você e outros usuários que precisam acessar os arquivos estiverem em um grupo comum, você pode adicionar o grupo ao arquivo, permitindo que todos os membros desse grupo acessem os arquivos.

### Conclusão

Sim, se você copiar arquivos de um HD externo ext4 com permissões `0770` e levá-los para outro computador, o acesso aos arquivos dependerá do usuário e do grupo. Se o usuário não for o mesmo que o proprietário ou não pertencer ao grupo, ele não conseguirá abrir os arquivos.

--------------------

Pedido do utilizador 10 de 10 - 05/06/2025, 18:58:24:
entao com 0777 fica como no smb.conf

GPT-4o mini:
Quando você define `create mask = 0777` no arquivo de configuração do Samba (`smb.conf`), isso significa que todos os arquivos criados no compartilhamento terão permissões totais para todos os usuários. Vamos detalhar como isso funciona:

### O que significa `create mask = 0777`

- **Permissões**:
  - O primeiro dígito (0) é para "setuid", "setgid" e "sticky bit" (geralmente não utilizado aqui).
  - O segundo dígito (7) é para o proprietário do arquivo: leitura (4), gravação (2) e execução (1) — totalizando 7.
  - O terceiro dígito (7) é para o grupo: leitura, gravação e execução — totalizando 7.
  - O quarto dígito (7) é para outros usuários: leitura, gravação e execução — totalizando 7.

### Resultado

Com `create mask = 0777`, todos os arquivos criados no compartilhamento Samba terão as seguintes permissões:

- **Proprietário**: Pode ler, escrever e executar.
- **Grupo**: Pode ler, escrever e executar.
- **Outros**: Pode ler, escrever e executar.

### Implicações

1. **Acesso Total**: Qualquer usuário que tenha acesso ao compartilhamento poderá ler, modificar e executar os arquivos. Isso é útil em ambientes onde a colaboração é necessária, mas pode ser um risco de segurança, pois qualquer pessoa na rede pode alterar ou excluir arquivos.

2. **Transferência para Outros Sistemas**: Se você copiar arquivos criados com permissões `0777` para outro sistema de arquivos (como FAT32 ou ext4), esses arquivos ainda terão permissões que permitem acesso total a todos os usuários, independentemente do sistema de arquivos.

### Exemplo de Configuração no `smb.conf`

Aqui está um exemplo de como você pode configurar isso no seu arquivo `smb.conf`:

```ini
[PublicoHome]
path = /home/king/Público
browsable = yes
writable = yes
guest ok = yes
read only = no
create mask = 0777
directory mask = 0777
```

### Conclusão

Definir `create mask = 0777` no Samba garante que todos os arquivos criados no compartilhamento sejam acessíveis a todos os usuários, o que pode ser útil em um ambiente colaborativo, mas deve ser feito com cautela devido a questões de segurança. Se você precisar de um controle mais rigoroso sobre quem pode acessar e modificar os arquivos, considere usar permissões mais restritivas, como `0770` ou `0755`.
